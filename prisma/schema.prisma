generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id               String             @id
  patientId        String
  doctorId         String?
  reason           String?
  status           AppointmentStatus  @default(PENDING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  date             DateTime
  service          String             @default("General Consultation")
  maritalStatus    MaritalStatus?
  timeslot         DateTime
  User             User?              @relation(fields: [doctorId], references: [id])
  Patient          Patient            @relation(fields: [patientId], references: [id])
  ClientAttendance ClientAttendance[]
  DentalChart      DentalChart[]
  DentalTreatment  DentalTreatment[]
}

model ClinicalNote {
  id                                   String     @id
  patientId                            String
  createdById                          String
  createdAt                            DateTime   @default(now())
  updatedAt                            DateTime
  approvedById                         String?
  doctorNotes                          String?
  observations                         String?
  status                               NoteStatus @default(APPROVED)
  treatmentPlan                        String?
  visitId                              String?
  User_ClinicalNote_approvedByIdToUser User?      @relation("ClinicalNote_approvedByIdToUser", fields: [approvedById], references: [id])
  User                                 User       @relation(fields: [createdById], references: [id])
  Patient                              Patient    @relation(fields: [patientId], references: [id])
  Visit                                Visit?     @relation(fields: [visitId], references: [id])
  User_DoctorApprovedNotes             User[]     @relation("DoctorApprovedNotes")
}

model Patient {
  id                                String               @id
  firstName                         String
  lastName                          String
  email                             String               @unique
  phone                             String               @unique
  dateOfBirth                       DateTime?
  address                           String?
  allergies                         String?
  deletedAt                         DateTime?
  createdAt                         DateTime             @default(now())
  updatedAt                         DateTime
  status                            PatientStatus        @default(ACTIVE)
  age                               Int?
  alternatePhone                    String?
  approvedAt                        DateTime?
  bloodGroup                        BloodGroup?
  chronicConditions                 String?
  country                           String?              @default("Nigeria")
  createdById                       String?
  currentMedications                String?
  emergencyName                     String?
  emergencyPhone                    String?
  emergencyRelation                 String?
  familyHistory                     String?
  genotype                          String?
  immunizationRecords               String?
  insuranceNumber                   String?
  insuranceProvider                 String?
  lga                               String?
  maritalStatus                     MaritalStatus?
  middleName                        String?
  occupation                        String?
  pastMedicalHistory                String?
  pastSurgicalHistory               String?
  patientId                         String               @unique
  paymentMethod                     PaymentMethod?
  primaryDoctorId                   String?
  registeredById                    String?
  registrationType                  RegistrationType     @default(FRONTDESK)
  religion                          String?
  state                             String?
  userId                            String?              @unique
  gender                            Gender?
  approvedById                      String?
  AestheticConsent                  AestheticConsent[]
  AestheticProcedure                AestheticProcedure[]
  Appointment                       Appointment[]
  ClinicalNote                      ClinicalNote[]
  CommunicationLog                  CommunicationLog[]
  DentalChart                       DentalChart[]
  DentalRecall                      DentalRecall[]
  DentalTreatment                   DentalTreatment[]
  EntNote                           EntNote[]
  EntSymptom                        EntSymptom[]
  Invoice                           Invoice[]
  IvSession                         IvSession[]
  NoteSuggestion                    NoteSuggestion[]
  Notification                      Notification[]
  User_Patient_approvedByIdToUser   User?                @relation("Patient_approvedByIdToUser", fields: [approvedById], references: [id])
  User_Patient_registeredByIdToUser User?                @relation("Patient_registeredByIdToUser", fields: [registeredById], references: [id])
  User_Patient_userIdToUser         User?                @relation("Patient_userIdToUser", fields: [userId], references: [id])
  PatientHistory                    PatientHistory[]
  Payment                           Payment[]
  Visit                             Visit[]
}

model RefreshToken {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  token     String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                               String               @id
  email                                            String               @unique
  password                                         String
  role                                             Role
  isActive                                         Boolean              @default(true)
  createdAt                                        DateTime             @default(now())
  updatedAt                                        DateTime
  firstName                                        String?
  lastLogin                                        DateTime?
  lastName                                         String?
  deletedAt                                        DateTime?
  emailVerified                                    Boolean              @default(false)
  phone                                            String?              @unique
  specialization                                   String?
  oauthId                                          String?
  oauthProvider                                    String?
  twoFactorEnabled                                 Boolean              @default(false)
  twoFactorSecret                                  String?
  twoFactorTempSecret                              String?
  AestheticConsent                                 AestheticConsent[]
  AestheticProcedure                               AestheticProcedure[]
  Appointment                                      Appointment[]
  AuditLog                                         AuditLog[]
  ClinicalNote_ClinicalNote_approvedByIdToUser     ClinicalNote[]       @relation("ClinicalNote_approvedByIdToUser")
  ClinicalNote                                     ClinicalNote[]
  EntNote                                          EntNote[]
  EntSymptom                                       EntSymptom[]
  IvReaction                                       IvReaction[]
  IvRecipe                                         IvRecipe[]
  NoteSuggestion_NoteSuggestion_approvedByIdToUser NoteSuggestion[]     @relation("NoteSuggestion_approvedByIdToUser")
  NoteSuggestion_NoteSuggestion_createdByIdToUser  NoteSuggestion[]     @relation("NoteSuggestion_createdByIdToUser")
  Patient_Patient_approvedByIdToUser               Patient[]            @relation("Patient_approvedByIdToUser")
  Patient_Patient_registeredByIdToUser             Patient[]            @relation("Patient_registeredByIdToUser")
  Patient_Patient_userIdToUser                     Patient?             @relation("Patient_userIdToUser")
  PatientHistory                                   PatientHistory[]
  RefreshToken                                     RefreshToken[]
  StaffAttendance                                  StaffAttendance[]
  ClinicalNote_DoctorApprovedNotes                 ClinicalNote[]       @relation("DoctorApprovedNotes")
  NoteSuggestion_NurseCreatedNotes                 NoteSuggestion[]     @relation("NurseCreatedNotes")

  @@index([email])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
}

model Invoice {
  id          String        @id
  patientId   String
  amount      Float
  status      InvoiceStatus @default(UNPAID)
  currency    String        @default("NGN")
  description String?
  reference   String?       @unique
  dueDate     DateTime?
  metadata    Json?
  issuedAt    DateTime      @default(now())
  paidAt      DateTime?
  updatedAt   DateTime
  Patient     Patient       @relation(fields: [patientId], references: [id])
  Payment     Payment[]
}

model NoteSuggestion {
  id                                     String     @id
  patientId                              String
  createdById                            String
  content                                String
  status                                 NoteStatus @default(PENDING)
  approvedById                           String?
  createdAt                              DateTime   @default(now())
  updatedAt                              DateTime
  User_NoteSuggestion_approvedByIdToUser User?      @relation("NoteSuggestion_approvedByIdToUser", fields: [approvedById], references: [id])
  User_NoteSuggestion_createdByIdToUser  User       @relation("NoteSuggestion_createdByIdToUser", fields: [createdById], references: [id])
  Patient                                Patient    @relation(fields: [patientId], references: [id])
  User_NurseCreatedNotes                 User[]     @relation("NurseCreatedNotes")
}

model PatientCounter {
  id        Int      @id @default(1)
  value     Int      @default(0)
  updatedAt DateTime
}

model Visit {
  id           String         @id
  patientId    String
  visitDate    DateTime       @default(now())
  reason       String?
  notes        String?
  ClinicalNote ClinicalNote[]
  Patient      Patient        @relation(fields: [patientId], references: [id])
}

model Payment {
  id             String        @id
  invoiceId      String
  amount         Float
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transactionRef String?       @unique
  gateway        String?
  note           String?
  createdAt      DateTime      @default(now())
  paidAt         DateTime?
  patientId      String?
  Invoice        Invoice       @relation(fields: [invoiceId], references: [id])
  Patient        Patient?      @relation(fields: [patientId], references: [id])
}

model AestheticAddon {
  id                 String             @id
  procedureId        String
  name               String
  price              Float?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  deletedAt          DateTime?
  AestheticProcedure AestheticProcedure @relation(fields: [procedureId], references: [id])
}

model AestheticConsent {
  id        String    @id
  patientId String
  doctorId  String?
  fileUrl   String
  signedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  User      User?     @relation(fields: [doctorId], references: [id])
  Patient   Patient   @relation(fields: [patientId], references: [id])
}

model AestheticProcedure {
  id             String           @id
  patientId      String
  doctorId       String
  name           String
  description    String?
  cost           Float?
  scheduledAt    DateTime?
  status         String           @default("SCHEDULED")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  deletedAt      DateTime?
  AestheticAddon AestheticAddon[]
  User           User             @relation(fields: [doctorId], references: [id])
  Patient        Patient          @relation(fields: [patientId], references: [id])
}

model AuditTrail {
  id         String   @id
  actorId    String
  actorRole  String
  action     String
  entityType String
  entityId   String
  details    String?
  ipAddress  String?
  createdAt  DateTime @default(now())
}

model ClientAttendance {
  id            String      @id
  appointmentId String
  attended      Boolean
  status        String
  notes         String?
  createdAt     DateTime    @default(now())
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model CommunicationLog {
  id        String   @id
  type      String
  message   String
  createdAt DateTime @default(now())
  patientId String
  Patient   Patient  @relation(fields: [patientId], references: [id])
}

model DentalChart {
  id            String       @id
  patientId     String
  appointmentId String?
  chartData     String?
  notes         String?
  createdById   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  updatedBy     String?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  Patient       Patient      @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model DentalRecall {
  id          String   @id
  patientId   String
  recallDate  DateTime
  reason      String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Patient     Patient  @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model DentalTreatment {
  id            String       @id
  patientId     String
  appointmentId String?
  procedure     String
  description   String?
  performedBy   String?
  cost          Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  updatedBy     String?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  Patient       Patient      @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model EntNote {
  id        String    @id
  patientId String
  doctorId  String
  title     String?
  content   String
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  deletedBy String?
  updatedBy String?
  User      User      @relation(fields: [doctorId], references: [id])
  Patient   Patient   @relation(fields: [patientId], references: [id])
}

model EntSymptom {
  id        String    @id
  patientId String
  doctorId  String
  symptom   String
  severity  String?
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  deletedBy String?
  updatedBy String?
  User      User      @relation(fields: [doctorId], references: [id])
  Patient   Patient   @relation(fields: [patientId], references: [id])
}

model IvReaction {
  id           String    @id
  sessionId    String
  type         String
  severity     String?
  notes        String?
  recordedById String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  User         User?     @relation(fields: [recordedById], references: [id])
  IvSession    IvSession @relation(fields: [sessionId], references: [id])
}

model IvRecipe {
  id          String      @id
  name        String
  description String?
  ingredients String[]
  createdById String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  User        User?       @relation(fields: [createdById], references: [id])
  IvSession   IvSession[]
}

model IvSession {
  id         String       @id
  patientId  String
  recipeId   String
  doctorId   String
  date       DateTime
  status     String       @default("SCHEDULED")
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  IvReaction IvReaction[]
  Patient    Patient      @relation(fields: [patientId], references: [id])
  IvRecipe   IvRecipe     @relation(fields: [recipeId], references: [id])
}

model Notification {
  id          String   @id
  recipientId String
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  type        String
  Patient     Patient  @relation(fields: [recipientId], references: [id])
}

model PatientHistory {
  id          String   @id
  type        String
  notes       String
  createdAt   DateTime @default(now())
  patientId   String
  createdById String?
  User        User?    @relation(fields: [createdById], references: [id])
  Patient     Patient  @relation(fields: [patientId], references: [id])
}

model Reminder {
  id          String   @id
  email       String
  subject     String?
  message     String
  scheduledAt DateTime
  sent        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model StaffAttendance {
  id        String    @id
  staffId   String
  clockIn   DateTime  @default(now())
  clockOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  User      User      @relation(fields: [staffId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum PatientStatus {
  PENDING
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Role {
  SUPERADMIN
  ADMIN
  DOCTOR
  NURSE
  FRONTDESK
  PATIENT
  PHARMACIST
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum NoteStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  INSURANCE
  HMO
  TRANSFER
  CARD
}

enum RegistrationType {
  SELF
  FRONTDESK
  ADMIN
  DOCTOR
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum NotificationType {
  APPOINTMENT
  REMINDER
  BILLING
  SYSTEM
}
