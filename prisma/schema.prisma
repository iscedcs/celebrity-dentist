generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id        String            @id
  patientId String
  doctorId  String?
  reason    String?
  status    AppointmentStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime
  date      DateTime
  service   String            @default("General Consultation")
  User      User?             @relation(fields: [doctorId], references: [id])
  Patient   Patient           @relation(fields: [patientId], references: [id])
}

model ClinicalNote {
  id                                   String     @id
  patientId                            String
  createdById                          String
  createdAt                            DateTime   @default(now())
  updatedAt                            DateTime
  approvedById                         String?
  doctorNotes                          String?
  observations                         String?
  status                               NoteStatus @default(APPROVED)
  treatmentPlan                        String?
  visitId                              String?
  User_ClinicalNote_approvedByIdToUser User?      @relation("ClinicalNote_approvedByIdToUser", fields: [approvedById], references: [id])
  User                                 User       @relation(fields: [createdById], references: [id])
  Patient                              Patient    @relation(fields: [patientId], references: [id])
  Visit                                Visit?     @relation(fields: [visitId], references: [id])
  User_DoctorApprovedNotes             User[]     @relation("DoctorApprovedNotes")
}

model Patient {
  id                                String           @id
  firstName                         String
  lastName                          String
  email                             String           @unique
  phone                             String           @unique
  dateOfBirth                       DateTime?
  address                           String?
  allergies                         String?
  deletedAt                         DateTime?
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime
  status                            PatientStatus    @default(ACTIVE)
  age                               Int?
  alternatePhone                    String?
  approvedAt                        DateTime?
  bloodGroup                        BloodGroup?
  chronicConditions                 String?
  country                           String?          @default("Nigeria")
  createdById                       String?
  currentMedications                String?
  emergencyName                     String?
  emergencyPhone                    String?
  emergencyRelation                 String?
  familyHistory                     String?
  genotype                          String?
  immunizationRecords               String?
  insuranceNumber                   String?
  insuranceProvider                 String?
  lga                               String?
  maritalStatus                     MaritalStatus?
  middleName                        String?
  occupation                        String?
  pastMedicalHistory                String?
  pastSurgicalHistory               String?
  patientId                         String           @unique
  paymentMethod                     PaymentMethod?
  primaryDoctorId                   String?
  registeredById                    String?
  registrationType                  RegistrationType @default(FRONTDESK)
  religion                          String?
  state                             String?
  userId                            String?
  gender                            Gender?
  Appointment                       Appointment[]
  ClinicalNote                      ClinicalNote[]
  Invoice                           Invoice[]
  NoteSuggestion                    NoteSuggestion[]
  User_Patient_registeredByIdToUser User?            @relation("Patient_registeredByIdToUser", fields: [registeredById], references: [id])
  User_Patient_userIdToUser         User?            @relation("Patient_userIdToUser", fields: [userId], references: [id])
  Visit                             Visit[]
}

model RefreshToken {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  token     String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                               String           @id
  email                                            String           @unique
  password                                         String
  role                                             Role
  isActive                                         Boolean          @default(true)
  createdAt                                        DateTime         @default(now())
  updatedAt                                        DateTime
  firstName                                        String?
  lastLogin                                        DateTime?
  lastName                                         String?
  deletedAt                                        DateTime?
  emailVerified                                    Boolean          @default(false)
  phone                                            String?          @unique
  specialization                                   String?
  oauthId                                          String?
  oauthProvider                                    String?
  twoFactorEnabled                                 Boolean          @default(false)
  twoFactorSecret                                  String?
  twoFactorTempSecret                              String?
  Appointment                                      Appointment[]
  AuditLog                                         AuditLog[]
  ClinicalNote_ClinicalNote_approvedByIdToUser     ClinicalNote[]   @relation("ClinicalNote_approvedByIdToUser")
  ClinicalNote                                     ClinicalNote[]
  NoteSuggestion_NoteSuggestion_approvedByIdToUser NoteSuggestion[] @relation("NoteSuggestion_approvedByIdToUser")
  NoteSuggestion_NoteSuggestion_createdByIdToUser  NoteSuggestion[] @relation("NoteSuggestion_createdByIdToUser")
  Patient_Patient_registeredByIdToUser             Patient[]        @relation("Patient_registeredByIdToUser")
  Patient_Patient_userIdToUser                     Patient[]        @relation("Patient_userIdToUser")
  RefreshToken                                     RefreshToken[]
  ClinicalNote_DoctorApprovedNotes                 ClinicalNote[]   @relation("DoctorApprovedNotes")
  NoteSuggestion_NurseCreatedNotes                 NoteSuggestion[] @relation("NurseCreatedNotes")

  @@index([email])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
}

model Invoice {
  id          String        @id
  patientId   String
  amount      Float
  status      InvoiceStatus @default(UNPAID)
  currency    String        @default("NGN")
  description String?
  reference   String?       @unique
  dueDate     DateTime?
  metadata    Json?
  issuedAt    DateTime      @default(now())
  paidAt      DateTime?
  updatedAt   DateTime
  Patient     Patient       @relation(fields: [patientId], references: [id])
  Payment     Payment[]
}

model NoteSuggestion {
  id                                     String     @id
  patientId                              String
  createdById                            String
  content                                String
  status                                 NoteStatus @default(PENDING)
  approvedById                           String?
  createdAt                              DateTime   @default(now())
  updatedAt                              DateTime
  User_NoteSuggestion_approvedByIdToUser User?      @relation("NoteSuggestion_approvedByIdToUser", fields: [approvedById], references: [id])
  User_NoteSuggestion_createdByIdToUser  User       @relation("NoteSuggestion_createdByIdToUser", fields: [createdById], references: [id])
  Patient                                Patient    @relation(fields: [patientId], references: [id])
  User_NurseCreatedNotes                 User[]     @relation("NurseCreatedNotes")
}

model PatientCounter {
  id        Int      @id @default(1)
  value     Int      @default(0)
  updatedAt DateTime
}

model Visit {
  id           String         @id
  patientId    String
  visitDate    DateTime       @default(now())
  reason       String?
  notes        String?
  ClinicalNote ClinicalNote[]
  Patient      Patient        @relation(fields: [patientId], references: [id])
}

model Payment {
  id             String        @id
  invoiceId      String
  amount         Float
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transactionRef String?       @unique
  gateway        String?
  note           String?
  createdAt      DateTime      @default(now())
  paidAt         DateTime?
  Invoice        Invoice       @relation(fields: [invoiceId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PatientStatus {
  PENDING
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Role {
  SUPERADMIN
  ADMIN
  DOCTOR
  NURSE
  FRONTDESK
  PATIENT
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum NoteStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  INSURANCE
  HMO
  TRANSFER
  CARD
}

enum RegistrationType {
  SELF
  FRONTDESK
  ADMIN
  DOCTOR
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
